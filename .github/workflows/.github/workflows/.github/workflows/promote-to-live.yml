name: Promote to Live (canary → live)

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Shadow Turbo"]
    types: [completed]

jobs:
  canary:
    name: Canary deploy (requires environment approval)
    runs-on: ubuntu-latest
    environment: live-canary
    steps:
      - name: Checkout validated commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # si se lanza desde workflow_run, head_sha está disponible en github.event.workflow_run.head_sha
          ref: ${{ fromJSON(toJSON(github.event.workflow_run)) && github.event.workflow_run.head_sha || github.sha }}

      - name: Preparar variables (paper/dry)
        run: |
          echo "RUN_MODE=paper" >> $GITHUB_ENV
          echo "TEST_NO_NETWORK=0" >> $GITHUB_ENV  # canary may use real secrets from Environment
          echo "TEST_FAST=1" >> $GITHUB_ENV

      - name: Canary: ejecutar smoke (paper/dry) y escribir canary_verdict.json
        run: |
          python - <<'PY'
import json, time, sys
# Aquí se ejecuta el pequeño smoke/dry-run del bot usando los secrets del Environment.
# Implementa tu lógica real de chequeo; aquí se simula y se escribe canary_verdict.json
start = time.time()
# ... ejecutar checks mínimos ...
duration = time.time() - start
canary = {
  "verdict": "OK",
  "notes": "canary_smoke_ok",
  "duration_s": duration,
  "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
}
json.dump(canary, open("canary_verdict.json","w"))
perf = {"p95_ms": None, "timestamp": canary["timestamp"]}
json.dump(perf, open("canary_perf.json","w"))
PY

      - name: Upload canary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: canary-${{ github.run_id }}
          path: |
            canary_verdict.json
            canary_perf.json
          retention-days: 7

  promote_live:
    name: Promote to live (requires 2 approvals)
    needs: canary
    runs-on: ubuntu-latest
    environment: live
    steps:
      - name: Checkout same commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Download canary artifacts
        uses: actions/download-artifact@v4
        with:
          name: canary-${{ needs.canary.outputs.artifact_name || github.run_id }}
          path: ./canary_artifacts
        continue-on-error: true

      - name: Validate canary verdict and gates
        run: |
          python - <<'PY'
import json, sys, os
cv_path = "./canary_artifacts/canary_verdict.json"
if not os.path.exists(cv_path):
    print("canary_verdict.json missing -> fail")
    sys.exit(1)
cv = json.load(open(cv_path))
verdict = cv.get("verdict","FAIL").upper()
p95 = None
perf_path = "./canary_artifacts/canary_perf.json"
if os.path.exists(perf_path):
    try:
        p95 = json.load(open(perf_path)).get("p95_ms")
    except:
        p95 = None
# Gates
if verdict != "OK":
    print("Canary verdict not OK; aborting promotion")
    sys.exit(2)
# p95 gate (example: must not exceed 2000ms for canary allow)
if p95 is not None and p95 > 2000:
    print(f"Canary p95 {p95} > threshold; aborting")
    sys.exit(3)
print("Canary gates passed")
PY

      - name: Live: perform promotion (dry step placeholder)
        run: |
          echo "Promotion would now occur using the validated commit and parameters."
          echo "Ensure runbooks and monitoring are active."

      - name: Write live_verdict.json
        run: |
          python - <<'PY'
import json, time
lv = {"verdict":"OK","notes":"live_promoted","timestamp":time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())}
json.dump(lv, open("live_verdict.json","w"))
PY
      - name: Upload live_verdict
        uses: actions/upload-artifact@v4
        with:
          name: live-verdict-${{ github.run_id }}
          path: live_verdict.json
          retention-days: 7
